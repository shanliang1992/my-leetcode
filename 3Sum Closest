class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        std::sort(nums.begin(),nums.end());
        unsigned int nums_size = nums.size();
        int closest = nums[0] + nums[1] + nums[2];
        int diff = std::abs(closest - target);
        for (unsigned int begin = 0; begin < nums_size - 2; begin++) {
            if (begin > 0 && nums[begin - 1] == nums[begin]) continue;
            unsigned int mid = begin + 1;
            unsigned int end = nums_size - 1;
            while (mid < end) {
                auto current = nums[begin] + nums[mid] + nums[end];
                if (current > target) {
                    if (current - target < diff) {
                        closest = current;
                        diff = closest - target;
                    }
                    while (mid < end && nums[end--] == nums[end]);
                }
                else if (current < target) {
                    if (target - current< diff) {
                        closest = current;
                        diff = target - closest;
                    }
                    while (mid < end && nums[mid++] == nums[mid]);
                }
                else{
                    return target;
                }
            }
        }
        return closest;        
    }
};
