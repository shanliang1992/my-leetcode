class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        std::sort(nums.begin(),nums.end());
        std::vector<std::vector<int>> result;
        std::unordered_map<int, std::vector<std::vector<unsigned int>>> two_sum;
        unsigned int nums_size = nums.size();
        if (nums_size < 4) return result;
        for (unsigned int i = 0; i < nums_size - 1; i++) {
            for (unsigned int j = i + 1; j < nums_size; j++) {
                auto sum = nums[i] + nums[j];
                if (two_sum.count(target-sum)) {
                    for (auto before_two:two_sum[target-sum]) {
                        if (before_two[0] == i || before_two[0] == j || before_two[1] == i || before_two[1] == j) break;
                        std::vector<int> result_tmp {nums[before_two[0]], nums[before_two[1]], nums[i], nums[j]};
                        std::sort(result_tmp.begin(), result_tmp.end());
                        result.push_back(std::move(result_tmp));
                    }
                }
                if (two_sum.count(sum)) {
                    two_sum[sum].push_back(std::vector<unsigned int>{i, j});
                } 
                else two_sum.insert({sum, std::vector<std::vector<unsigned int>>{{i, j}}});
            }
        }
        std::sort(result.begin(),result.end());
        std::vector<std::vector<int>>::iterator it = std::unique(result.begin(), result.end());
        result.resize(std::distance(result.begin(), it));
        return result;
    }
};
